name: Build and Release Installer

on:
  push:
    tags:
      - "v*" # Trigger workflow on tags, e.g., v1.0.0

permissions:
  contents: write # Ensure GITHUB_TOKEN has write permissions

jobs:
  build:
    runs-on: windows-latest
    steps:
      # Step 0: Extract the version from the tag
      - name: Extract Version from Tag
        id: get_version
        shell: powershell
        run: |
          $version = "${{ github.ref }}" -replace "refs/tags/v", ""
          echo "VERSION=$version" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8

      # Step 1: Check out the code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Set up .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      # Step 3: Install NSIS
      - name: Install NSIS
        shell: powershell
        run: choco install nsis -y

      - name: Debug Read CHANGELOG.md
        shell: powershell
        run: |
          $changelogPath = "CHANGELOG.md"
          $content = Get-Content $changelogPath -Raw
          Write-Output "CHANGELOG Content: `n$content"

      # Step 4: Extract release notes from CHANGELOG.md
      - name: Extract Release Notes
        id: get_notes
        shell: powershell
        run: |
          $version = $Env:VERSION
          $changelogPath = "CHANGELOG.md"
          $notes = Get-Content $changelogPath | ForEach-Object {
              if ($_ -match "^## \[$version\]") {
                  $capture = $true
                  continue
              }
              if ($capture -and ($_ -match "^## \[")) {
                  $capture = $false
              }
              if ($capture) { $_ }
          } | Out-String

          if (-not $notes) {
              Write-Output "No release notes found for version $version. Using an empty body."
              $notes = ""
          }

          $notes = $notes.Trim()
          echo "RELEASE_NOTES=$notes" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8

      # Debug: Print extracted release notes
      - name: Debug Release Notes
        run: |
          echo "Release Notes for v${{ env.VERSION }}:"
          echo "${{ env.RELEASE_NOTES }}"

      # Step 5: Update AssemblyVersion and FileVersion in .csproj
      - name: Update AssemblyVersion and FileVersion in .csproj
        shell: powershell
        run: |
          $csprojPath = "SampleApp.csproj"
          $newVersion = $Env:VERSION  # The version extracted from GitHub tag

          Write-Output "Updating AssemblyVersion and FileVersion to $newVersion"

          # Update AssemblyVersion (set it as <version>.0 for compatibility reasons)
          (Get-Content $csprojPath) -replace '<AssemblyVersion>.*</AssemblyVersion>', "<AssemblyVersion>$newVersion.0</AssemblyVersion>" |
            Set-Content $csprojPath

          # Update FileVersion
          (Get-Content $csprojPath) -replace '<FileVersion>.*</FileVersion>', "<FileVersion>$newVersion.0</FileVersion>" |
            Set-Content $csprojPath

      # Step 6: Publish the project
      - name: Build Project
        run: dotnet publish -c Release -r win-x64 --self-contained false /p:PublishSingleFile=true
        env:
          VERSION: ${{ env.VERSION }}

      # Step 7: Generate NSIS installer
      - name: Generate Installer
        run: makensis installer_script.nsi

      # Debug: List files in the directory
      - name: Debug List Files
        run: dir

      # Step 8: Create a GitHub Release and upload the installer
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: SampleAppInstaller.exe
          name: "Release v${{ env.VERSION }}"
          tag_name: "v${{ env.VERSION }}"
          body: "${{ env.RELEASE_NOTES }}" # Use extracted release notes for the body
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
